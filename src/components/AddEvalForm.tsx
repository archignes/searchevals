import React, { useContext, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { FormProvider } from 'react-hook-form';
import DataContext from './DataContext';
import { Textarea } from './ui/textarea';
import { ImageUploadField } from './ImageSubmission';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from './ui/card';
import { zodResolver } from '@hookform/resolvers/zod';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select"

import { z } from 'zod';
import copy from 'copy-to-clipboard';
import { Button } from "./ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./ui/form"
import { Input } from "./ui/input"
import { Checkbox } from "./ui/checkbox"
import evaluators from "../../src/data/evaluators.json";
import systems from "../../src/data/systems.json";



export default function EvalInputForm() {
  

  const imageSchema = z.object({
    url: z.string(),
    caption: z.string().optional(),
    annotation: z.boolean().optional(),
  });

  const evalPartSchema = z.object({
    id: z.string(),
    content: z.string(),
    images: z.array(imageSchema).optional(),
  });

  const evalsystemschema = z.object({
    id: z.string().transform((val) => val.toLowerCase()),
    date: z.string().refine((val) => /^(?:\d{4}|\d{4}-\d{2}|\d{4}-\d{2}-\d{2})$/.test(val), {
      message: "Date must be in YYYY, YYYY-MM, or YYYY-MM-DD format",
    }),
    query: z.string().refine((val) => val.length > 0, {
      message: "Query must be longer than 0 characters",
    }),
    url: z.string().url(),
    context: z.string().optional(),
    systems: z.array(z.string()).nonempty(),
    eval_parts: z.array(evalPartSchema).optional(),
    content: z.string().optional(),
    images: z.array(imageSchema)
      .refine((val) => val.every((image) => image.url.startsWith('http') || image.url.startsWith('https') || image.url.startsWith('/')), {
        message: "Image URL must be a string starting with 'http' or 'https' or '/'",
      })
      .optional(),
    evaluator_id: z.string().refine((id) => evaluators.some(evaluator => evaluator.id === id), {
      message: "Evaluator ID must match an existing evaluator's ID",
    }),
  });

  const form = useForm<z.infer<typeof evalsystemschema>>({
    resolver: zodResolver(evalsystemschema),
    defaultValues: {
      id: '',
      date: '',
      query: '',
      url: '',
      context: '',
      systems: [],
      eval_parts: [],
      content: '',
      images: [],
      evaluator_id: '',
    },
  })

  function onSubmit(values: z.infer<typeof evalsystemschema>) {
    console.log("submit")
    values.content = values.content?.replace(/\n\n/g, "\\n\\n");
    values.context = values.context?.replace(/\n\n/g, "\\n\\n");
    if (values.eval_parts) {
      values.eval_parts = values.eval_parts.map(part => ({
        ...part,
        content: part.content.replace(/\n\n/g, "\\n\\n"),
      }));
    }
    if (!values.images || values.images.length === 0 || (values.images.length === 1 && values.images[0]["url"] === "")) {
      delete values.images;
    }
    copy(JSON.stringify(values, null, 2));
    alert("Data copied to clipboard!");
    console.log(values)
  }


  // Watch values outside of the render function
  const query = form.watch("query");
  const evaluator_id = form.watch("evaluator_id");
  let evalIdentifier = '{initial-query-terms-hyphenated}-{evaluator_id}';
  let queryWords: string = "{initial-query-terms-hyphenated}"
  if (query || evaluator_id) {
    if (query) {
      queryWords = encodeURIComponent(query.split(/\s+/).slice(0, 20).join(' ').toLowerCase().replace(/\s+/g, '-').replace(/\?/g, ''));
    }
    evalIdentifier = `${queryWords}-${evaluator_id ? evaluator_id : '{evaluator_id}'}`;  }

  // Use useEffect to set the form value
  useEffect(() => {
    if (evalIdentifier) {
      form.setValue("id", evalIdentifier);
    }
  }, [evalIdentifier, form]);




  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-xl font-bold">New Eval</CardTitle>
      </CardHeader>
      <CardContent>
        <FormProvider {...form}>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-2">
              {/* ID Field */}
              <FormField
                control={form.control}
                name="id"
                render={({ field }) => {
                  return (
                    <FormItem>
                      <FormLabel>eval.id</FormLabel>
                      <FormControl>
                        <Input {...field} readOnly value={evalIdentifier} className="bg-gray-200" />
                      </FormControl>
                      <FormDescription>
                        Generated by rule. Unique identifier for the evaluation.<br></br>
                        Format: lowercase, hyphenated, first-10-terms-from-query + `-` + `evaluator_id`<br></br>
                        Examples: <a href="https://searchevals.com/card/had-a-seizure-now-what-soft" className="underline">had-a-seizure-now-what-soft</a>, <a href="https://searchevals.com/card/hulu-free-trial-AravSrinivas" className="underline">hulu-free-trial-AravSrinivas</a>, <a href="https://searchevals.com/card/thyroid-nodule-treatments-RichardSocher" className="underline">thyroid-nodule-treatments-RichardSocher</a>.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              {/* Date Field */}
              <FormField
                control={form.control}
                name="date"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Date</FormLabel>
                    <FormControl>
                      <Input
                        type="date"
                        {...field}
                        onChange={(e) => {
                          const inputDate = new Date(e.target.value);
                          if (isNaN(inputDate.getTime())) { // Check if the date is invalid
                            // Optionally handle the invalid date case, e.g., by clearing the field or showing an error message
                            return; // Exit the function to prevent further processing
                          }
                          const currentDate = new Date();
                          if (inputDate > currentDate) {
                            alert("Date cannot be in the future.");
                            return;
                          }
                          const dateValue = inputDate.toISOString().split('T')[0];
                          field.onChange(dateValue); // Update the form with the validated and reformatted date
                        }}
                      />
                    </FormControl>
                    <FormDescription>
                      Date of the evaluation.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* URL Field */}
                  <FormField
                    control={form.control}
                    name="url"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>URL</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormDescription>
                          URL source of the evaluation.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
              {/* Evaluator Field */}
              

              <FormField
                control={form.control}
                name="evaluator_id"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Evaluator</FormLabel>
                    <Select onValueChange={field.onChange} defaultValue={field.value}>
                      <FormControl>
                        <SelectTrigger className="w-[180px]">
                          <SelectValue placeholder="Select evaluator" />
                        </SelectTrigger>
                      </FormControl>
                        <SelectContent>
                        {evaluators.sort((a, b) => a.name.localeCompare(b.name)).map((evaluator) => (
                          <SelectItem key={evaluator.id} value={evaluator.id}>
                            {evaluator.name}
                          </SelectItem>
                        ))}
                        </SelectContent>

                      </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* Query Field */}
              <FormField
                control={form.control}
                name="query"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Query</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormDescription>
                      The query evaluated.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {/* Content Field */}
              <FormField
                control={form.control}
                name="content"
                render={({ field }) => {
                  return (
                    <FormItem>
                      <FormLabel>Content</FormLabel>
                      <FormControl>
                        <Textarea {...field} className="form-textarea mt-1 block w-full" rows={5}></Textarea>
                      </FormControl>
                      <FormDescription>
                        Raw text of the evaluation. Supports multiple lines.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
              {/* Images Field */}
              <ImageUploadField />


              {/* Context Field (Optional) */}
              <FormField
                control={form.control}
                name="context"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Context</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormDescription>
                      Context is optional text preceeding eval parts.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
                  <hr></hr><FormLabel>Systems</FormLabel>
                  <div className="grid grid-cols-3 gap-2 w-full">
              {systems.map((system) => (
                <FormField
                  key={system.id}
                  control={form.control}
                  name="systems"
                  render={({ field }) => {
                    return (
                      <FormItem
                        key={system.id}
                        className="flex flex-row systems-start items-center space-x-1 space-y-1"
                      >
                        <FormControl>
                          <Checkbox
                            checked={field.value?.includes(system.id)}
                            onCheckedChange={(checked) => {
                              return checked
                                ? field.onChange([...(field.value || []), system.id])
                                : field.onChange(
                                  (field.value || []).filter(
                                    (value) => value !== system.id
                                  )
                                )
                            }}
                          />
                        </FormControl>
                        <a href={system.search_link.replace("%s", encodeURIComponent(system.name))} target="_blank" rel="noopener noreferrer" className="underline">
                          <FormLabel className="text-sm font-normal">{system.name}</FormLabel>
                        </a>
                      </FormItem>
                    )
                  }}
                />))}
                  </div>
              <Button type="submit">Submit</Button>
            </form>
          </Form>
        </FormProvider>
        </CardContent>
    </Card>
  );
}
