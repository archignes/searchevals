import React, { useContext, useEffect } from 'react';
import { useForm, useFieldArray } from 'react-hook-form';
import { FormProvider } from 'react-hook-form';
import DataContext, { evalPart, System } from './DataContext';
import ImageUploadField from './ImageSubmission'

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from './ui/card';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import copy from 'copy-to-clipboard';
import { Button } from "./ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./ui/form"
import { Input } from "./ui/input"
import { Checkbox } from "./ui/checkbox"


// Define Zod schema based on the EvalItem interface
const evalPersonSchema = z.object({
  id: z.string(), 
  name: z.string(),
  role: z.string(),
  URL: z.string().url(),
  conflict: z.array(z.string()).optional()
});

const evalPartSchema = z.object({
  id: z.string(),
  content: z.string(),
  images: z.array(z.string()).optional(),
});

const evalsystemschema = z.object({
  id: z.string().transform((val) => val.toLowerCase()),
  date: z.string().refine((val) => /^\d{4}-\d{2}-\d{2}$/.test(val), {
    message: "Date must be in YYYY-MM-DD format",
  }),
  query: z.string(),
  url: z.string().url(),
  context: z.string().optional(),
  systems: z.array(z.string()).optional(),
  eval_parts: z.array(evalPartSchema).optional(),
  content: z.string().optional(),
  images: z.array(z.string()).optional(),
  evaluator: evalPersonSchema.optional(),
});



export function EvalForm() {
  const { data, systems, persons } = useContext(DataContext); // Destructure data from DataContext

  const form = useForm<z.infer<typeof evalsystemschema>>({
    resolver: zodResolver(evalsystemschema),
    defaultValues: {},
  })

  // Watch values outside of the render function
  const query = form.watch("query");
  const evaluator = form.watch("evaluator");
  let evalIdentifier = '{initial-query-terms-hyphenated}-{person_id}';
  let queryWords: string = "{initial-query-terms-hyphenated}"
  if (query || evaluator) {
    if (query) {
      queryWords = encodeURIComponent(query.split(/\s+/).slice(0, 10).join(' ').toLowerCase().replace(/\s+/g, '-').replace(/\?/g, ''));
    }
    evalIdentifier = `${queryWords}-${evaluator && evaluator.id ? evaluator.id.toLowerCase() : '{evaluator_id}'}`;  }

  // Use useEffect to set the form value
  useEffect(() => {
    if (evalIdentifier) {
      form.setValue("id", evalIdentifier);
    }
    console.log("evalIdentifier:", evalIdentifier);
  }, [evalIdentifier, form]);


  // Watch values outside of the render function
  const evaluatorUrl = form.watch("evaluator.URL");
  let evaluatorIdentifier = '{identifier_from_url}';
  if (evaluatorUrl) {
    if (evaluatorUrl.includes("twitter")) {
      evaluatorIdentifier = evaluatorUrl.split("/")[3].toLowerCase();
    } else if (evaluatorUrl.includes("wikipedia")) {
      evaluatorIdentifier = evaluatorUrl.split("/")[-1].toLowerCase();
    }
  }

  // Use useEffect to set the form value
  useEffect(() => {
    if (evaluatorIdentifier) {
      form.setValue("evaluator.id", evaluatorIdentifier);
    }
    console.log("evaluatorIdentifier:", evaluatorIdentifier);
  }, [evaluatorIdentifier, form]);



  function onSubmit(values: z.infer<typeof evalsystemschema>) {
    copy(JSON.stringify(values, null, 2));
    alert("Evaluation data copied to clipboard!");
    console.log(values)
  }

  return (
    <div className="w-2/3 mx-auto">
      <Card>
        <CardHeader className="pb-2">
          <CardTitle className="text-xl font-bold">
            New Evaluation
          </CardTitle>
        </CardHeader>
        <CardContent>
          <FormProvider {...form}>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-2">
          {/* ID Field */}
          <FormField
            control={form.control}
            name="id"
            render={({ field }) => {
              return (
                <FormItem>
                  <FormLabel>eval.id</FormLabel>
                  <FormControl>
                    <Input {...field} readOnly value={evalIdentifier} className="bg-gray-200" />
                  </FormControl>
                  <FormDescription>
                    Generated by rule. Unique identifier for the evaluation.<br></br>
                    Format: lowercase, hyphenated, first-10-terms-from-query + `-` + `evaluator_id`<br></br>
                    Examples: <a href="https://searchevals.com/card/had-a-seizure-now-what-soft" className="underline">had-a-seizure-now-what-soft</a>, <a href="https://searchevals.com/card/hulu-free-trial-aravsrinivas" className="underline">hulu-free-trial-aravsrinivas</a>, <a href="https://searchevals.com/card/thyroid-nodule-treatments-richardsocher" className="underline">thyroid-nodule-treatments-richardsocher</a>.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              );
            }}
          />
          {/* Date Field */}
          <FormField
            control={form.control}
            name="date"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Date</FormLabel>
                <FormControl>
                  <Input
                    type="date"
                    {...field}
                    onChange={(e) => {
                      const inputDate = new Date(e.target.value);
                      if (isNaN(inputDate.getTime())) { // Check if the date is invalid
                        // Optionally handle the invalid date case, e.g., by clearing the field or showing an error message
                        return; // Exit the function to prevent further processing
                      }
                      const currentDate = new Date();
                      if (inputDate > currentDate) {
                        alert("Date cannot be in the future.");
                        return;
                      }
                      const dateValue = inputDate.toISOString().split('T')[0];
                      field.onChange(dateValue); // Update the form with the validated and reformatted date
                    }}
                  />
                </FormControl>
                <FormDescription>
                  Date of the evaluation.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* Query Field */}
          <FormField
            control={form.control}
            name="query"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Query</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormDescription>
                  The query evaluated.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          {/* ID Field */}
              <FormField
                control={form.control}
                name="content"
                render={({ field }) => {
                  return (
                    <FormItem>
                      <FormLabel>Evaluation text content</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormDescription>
                        Raw text of the evaluation.
                      </FormDescription>
                      <FormMessage />
                    </FormItem>
                  );
                }}
          />
              {/* Images Field */}
              <ImageUploadField />
          {/* Evaluator Fields */}
          <Card>
            <CardHeader className="pb-2">
              <CardTitle>
                Evaluator
              </CardTitle>
            </CardHeader>
            <CardContent>
              <FormField
                control={form.control}
                name="evaluator.id"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Evaluator.id</FormLabel>
                    <FormControl>
                      <Input {...field} readOnly value={evaluatorIdentifier} className="bg-gray-200" />
                    </FormControl>
                    <FormDescription>
                       Generated by rule. Unique identifier for the evaluator.<br></br>Defaults to the Twitter username or Wikipedia URL ending.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="evaluator.name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormDescription>
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="evaluator.role"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Role</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormDescription>
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="evaluator.URL"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>URL</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormDescription>
                      URL as reference for evaluator. Please default to an authoritative URL.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              {systems.map((system) => (
                <FormField
                  key={system.id}
                  control={form.control}
                  name="evaluator.conflict"
                  render={({ field }) => {
                    return (
                      <FormItem
                        key={system.id}
                        className="flex flex-row systems-start items-center space-x-1 space-y-1"
                      >
                        <FormControl>
                          <Checkbox
                            checked={field.value?.includes(system.id)}
                            onCheckedChange={(checked) => {
                              return checked
                                ? field.onChange([...(field.value || []), system.id])
                                : field.onChange(
                                  (field.value || []).filter(
                                    (value) => value !== system.id
                                  )
                                )
                            }}
                          />
                        </FormControl>
                        <FormLabel className="text-sm font-normal">{system.name}</FormLabel>
                      </FormItem>
                    )
                  }}
                />))}

                  </CardContent>
                </Card>
              {/* URL Field */}
              <FormField
                control={form.control}
                name="url"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>URL</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormDescription>
                      URL source of the evaluation.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

          {/* Context Field (Optional) */}
          <FormField
            control={form.control}
            name="context"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Context</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormDescription>
                  Context is optional text preceeding eval parts.
                </FormDescription>
                <FormMessage />
              </FormItem>
            )}
          />
          {systems.map((system) => (
            <FormField
              key={system.id}
              control={form.control}
              name="systems"
              render={({ field }) => {
                return (
                  <FormItem
                    key={system.id}
                    className="flex flex-row systems-start items-center space-x-1 space-y-1"
                  >
                    <FormControl>
                      <Checkbox
                        checked={field.value?.includes(system.id)}
                        onCheckedChange={(checked) => {
                          return checked
                            ? field.onChange([...(field.value || []), system.id])
                            : field.onChange(
                              (field.value || []).filter(
                                (value) => value !== system.id
                              )
                            )
                        }}
                      />
                    </FormControl>
                    <FormLabel className="text-sm font-normal">{system.name}</FormLabel>
                  </FormItem>
                )
              }}
          />)) }
          <Button type="submit">Submit</Button>
        </form>
      </Form>
          </FormProvider>
        </CardContent>
      </Card>
    </div>
  )
}