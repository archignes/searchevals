import React, { useContext, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import DataContext from './DataContext';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from './ui/card';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import copy from 'copy-to-clipboard';
import { Button } from "./ui/button"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./ui/form"
import { Input } from "./ui/input"
import { Checkbox } from "./ui/checkbox"


export default function SystemInputForm() {
  const { systems } = useContext(DataContext);

  const evalSystemSchema = z.object({
    id: z.string().refine((id) => !systems.some(system => system.id === id), {
      message: "ID must be unique among systems",
    }),
    name: z.string(),
    search_link: z.string().url(),
    nondistinct_url: z.boolean().optional(),
    base_url_for: z.array(z.string()).optional(),
  });

  const form = useForm<z.infer<typeof evalSystemSchema>>({
    resolver: zodResolver(evalSystemSchema),
    mode: "onChange", // Use "onChange" mode for real-time validation feedback
  });

  const { watch, setValue, trigger, formState: { errors } } = form;
  // Watch values outside of the render function
  const systemName = watch("name");
  useEffect(() => {
    const systemIdentifier = systemName ? systemName.toLowerCase().replace(/\s+/g, '-') : '';
    setValue("id", systemIdentifier);
    trigger("id"); // Trigger validation for the id field
  }, [systemName, setValue, trigger]);



  useEffect(() => {
    const baseSystemSelected = !!watch("base_url_for")?.length; // Convert to boolean directly
    setValue("nondistinct_url", baseSystemSelected);
  }, [watch, setValue]);


  function onSubmit(values: z.infer<typeof evalSystemSchema>) {
    copy(JSON.stringify(values, null, 2));
    alert("Data copied to clipboard!");
    console.log(values)
  }



  return (
    <Card>
      <CardHeader>
          <CardTitle className="text-xl font-bold">New System</CardTitle>
      </CardHeader>
      <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-2">
              {/* ID Field */}
        <FormField
          control={form.control}
          name="id"
          render={({ field }) => (
            <FormItem>
              <FormLabel>id</FormLabel>
              <FormControl>
                <Input
                  {...form.register("id")}
                  className={`bg-gray-200 ${errors.id ? 'border-red-500' : ''}`}
                  onChange={(e) => {
                    setValue("id", e.target.value.toLowerCase().replace(/\s+/g, '-'));
                    trigger("id");
                  }}
                />
              </FormControl>
              <FormDescription>
                Generated by rule. Unique identifier for the system (or subsystem). Must be unique among systems.
              </FormDescription>
              {errors.id && <FormMessage>{errors.id.message?.toString()}</FormMessage>}
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormDescription>
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="search_link"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Search Link</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormDescription>
                This is the url for a search, with `%s` replacing where a query goes (if search-by-url is supported).
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <hr></hr><FormLabel>Base System (Optional)</FormLabel>
            <FormDescription>
              If it is a sub-system, identify the base system.
            </FormDescription>
        {systems.map((system) => (
          <FormField
            key={system.id}
            control={form.control}
            name="base_url_for"
            render={({ field }) => {
              return (
                <FormItem
                  key={system.id}
                  className="flex flex-row systems-start items-center space-x-1 space-y-1"
                >
                  <FormControl>
                    <Checkbox
                      checked={field.value?.includes(system.id)}
                      onCheckedChange={(checked) => {
                        return checked
                          ? field.onChange([...(field.value || []), system.id])
                          : field.onChange(
                            (field.value || []).filter(
                              (value) => value !== system.id
                            )
                          )
                      }}
                    />
                  </FormControl>
                  <FormLabel className="text-sm font-normal">{system.name}</FormLabel>
                </FormItem>
              )
            }}
          />))}
              <Button type="submit">Submit</Button>
            </form>
          </Form>
      </CardContent>
    </Card>
  )
}